//*************************************************************************************************
// ライト処理 (light.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルード
//*************************************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "light.h"
#include "keyboard.h"

//*************************************************************************************************
// 定数定義
//*************************************************************************************************

//*************************************************************************************************
// 列挙体
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************

//*************************************************************************************************
// ライトのコンストラクタ
//*************************************************************************************************
CLight::CLight ()
{
}

//*************************************************************************************************
// ライトのデストラクタ
//*************************************************************************************************
CLight::~CLight ()
{
}

//*************************************************************************************************
// ライト初期化処理
//*************************************************************************************************
HRESULT CLight::Init ( void )
{
    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice ( );

    //Direct3DデバイスのNULLチェック
    if ( pDevice != NULL )
    {
        //ライトの初期化
        ZeroMemory ( &light[0], sizeof ( D3DLIGHT9 ) );                //light情報をゼロに初期化
        light[0].Type = D3DLIGHT_DIRECTIONAL;                          //ライトのタイプ
        light[0].Diffuse = D3DXCOLOR ( 1.0f, 1.0f, 1.0f, 1.0f );       //平行光源の色
        light[0].Ambient = D3DXCOLOR ( 1.0f, 1.0f, 1.0f, 1.0f );       //環境光
        vecDir = D3DXVECTOR3 ( 0.5f, -1.0f, 0.0f );                    //ライトベクトルの方向

        //ベクトルの向きはそのままでt単位ベクトルを作る
        D3DXVec3Normalize((D3DXVECTOR3*)&light[0].Direction, &vecDir);

        ZeroMemory(&light[1], sizeof(D3DLIGHT9));                       //light情報をゼロに初期化
        light[1].Type = D3DLIGHT_DIRECTIONAL;                           //ライトのタイプ
        light[1].Diffuse = D3DXCOLOR(0.2f, 0.2f, 1.0f, 1.0f);           //平行光源の色
        light[1].Ambient = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);           //環境光
        vecDir = D3DXVECTOR3(0.0f, 1.0f, 0.0f);                         //ライトベクトルの方向

        //ベクトルの向きはそのままでt単位ベクトルを作る
        D3DXVec3Normalize((D3DXVECTOR3*)&light[1].Direction, &vecDir);

        //デバイスにライトを設定
        pDevice->SetLight ( 0, &light[0] );
        pDevice->SetLight(1, &light[1]);

        pDevice->LightEnable ( 0, TRUE );                   //ライトを有効にする
        pDevice->LightEnable(1, TRUE);                      //ライトを有効にする
        pDevice->SetRenderState ( D3DRS_LIGHTING, TRUE );   //ライトを全体を有効にする
    }

    return S_OK;
}

//*************************************************************************************************
// ライト終了処理
//*************************************************************************************************
void CLight::Uninit ( void )
{
}

//*************************************************************************************************
// ライト更新処理
//*************************************************************************************************
void CLight::Update ( void )
{
    //移動
    //if ( CManager::GetInputKeyboard ( )->GetKeyPress ( DIK_UP ) )  //前
    //{
    //    vecDir.z += 0.1f;
    //}
    //if ( CManager::GetInputKeyboard ( )->GetKeyPress ( DIK_DOWN ) )  //前
    //{
    //    vecDir.z -= 0.1f;
    //}
    //if ( CManager::GetInputKeyboard ( )->GetKeyPress ( DIK_LEFT ) )  //前
    //{
    //    vecDir.x += 0.1f;
    //}
    //if ( CManager::GetInputKeyboard ( )->GetKeyPress ( DIK_RIGHT ) )  //前
    //{
    //    vecDir.x -= 0.1f;
    //}

    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice ( );

    //Direct3DデバイスのNULLチェック
    if ( pDevice != NULL )
    {
        //ベクトルの向きはそのままでt単位ベクトルを作る
        //D3DXVec3Normalize ( (D3DXVECTOR3*)&light[0].Direction, &vecDir );
        //D3DXVec3Normalize((D3DXVECTOR3*)&light[1].Direction, &vecDir);

        //デバイスにライトを設定
        //pDevice->SetLight ( 0, &light[0] );
        //pDevice->SetLight(1, &light[1]);
    }
}

//*************************************************************************************************
// ライトの取得
//*************************************************************************************************
D3DLIGHT9 CLight::GetLight ( int nIndexLight )
{
    return light[nIndexLight];
}