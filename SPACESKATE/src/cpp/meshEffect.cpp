//*************************************************************************************************
// メッシュエフェクト処理 (meshEffect.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include "mode.h"
#include "modeGame.h"
#include "scene.h"
#include "scene3D.h"
#include "meshEffect.h"
#include "sceneModel.h"
#include "player.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************
#define TEXTURENAME00 "data/TEXTURE/ground2.jpg"    //読み込むテクスチャの名前

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// メッシュエフェクトのコンストラクタ
//*************************************************************************************************
CMeshEffect::CMeshEffect(SCENE_TYPE type, int nPriolity) :CScene3D(SCENE_TYPE_MESHEFFECT, nPriolity)
{
}

//*************************************************************************************************
// メッシュエフェクトのデストラクタ
//*************************************************************************************************
CMeshEffect::~CMeshEffect()
{
}

//*************************************************************************************************
// 初期化処理
//*************************************************************************************************
HRESULT CMeshEffect::Init(void)
{
    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice();

    //Direct3DデバイスのNULLチェック
    if (pDevice != NULL)
    {
        //頂点バッファの作成
        if (FAILED(pDevice->CreateVertexBuffer(
            sizeof(VERTEX_3D) * MESHEFFECT_POS_NUM, //頂点バッファのサイズ
            D3DUSAGE_WRITEONLY,                     //VertexBufferの使い方を指定
            FVF_VERTEX_3D,                          //頂点フォーマット
            D3DPOOL_MANAGED,                        //メモリ管理方法
            &m_pVtxBuffer,                          //頂点バッファ管理インターフェースポインタのアドレス
            NULL)))
        {
            return E_FAIL;
        }

        //インデックスバッファの作成
        if (FAILED(pDevice->CreateIndexBuffer(
            sizeof(WORD) * MESHEFFECT_POS_NUM,      //インデックスバッファのサイズ
            D3DUSAGE_WRITEONLY,                     //使用フラグ
            D3DFMT_INDEX16,                         //インデックスデータフォーマット
            D3DPOOL_MANAGED,                        //メモリの管理方法
            &m_pIdxBuffer,                          //インデックスバッファインターフェースポインタのアドレス
            NULL)))
        {
            return E_FAIL;
        }

        // テクスチャの生成
        if (FAILED(D3DXCreateTextureFromFile(pDevice, TEXTURENAME00, &m_pTexture)))
        {
            MessageBox(NULL, "テクスチャの読み込みに失敗しました", "終了メッセージ", MB_OK);
        }
    }

    m_Tex = D3DXVECTOR2(0.0f, 0.0f);
    m_TexSize = D3DXVECTOR2(1.0f, 1.0f);
    m_Normal = D3DXVECTOR3(0.0f, 1.0f, 0.0f);

    return S_OK;
}

//*************************************************************************************************
// 終了処理
//*************************************************************************************************
void CMeshEffect::Uninit(void)
{
}

//*************************************************************************************************
// 更新処理
//*************************************************************************************************
void CMeshEffect::Update(void)
{
    //頂点の半分繰り返す
    for (int i = 0; i < MESHEFFECT_POS_NUM/2; i++)
    {
        m_Pos[i * 2] = m_Pos[i * 2 + 2];
        m_Pos[i * 2 + 1] = m_Pos[i * 2 + 3];
    }

    //プレイヤーの上座標と下座標の取得
    m_Pos[MESHEFFECT_POS_NUM - 2] = CModeGame::GetPlayer()->GetPosUp();
    m_Pos[MESHEFFECT_POS_NUM - 1] = CModeGame::GetPlayer()->GetPosDown();

    //頂点情報を設定
    VERTEX_3D* pVtx;                            //仮想アドレス用ポインタ

    //頂点バッファをロックして、仮想アドレスを取得する
    m_pVtxBuffer->Lock(0, 0, (void**)&pVtx, 0);

    for (int i = 0; i < MESHEFFECT_POS_NUM/2; i++)
    {
        //頂点座標の設定(3D座標)
        pVtx[i * 2].pos = m_Pos[i * 2];
        pVtx[i * 2 + 1].pos = m_Pos[i * 2 + 1];

        //ライトベクトルの設定
        pVtx[i * 2].normal = m_Normal;
        pVtx[i * 2 + 1].normal = m_Normal;

        //頂点カラー(0.0f〜1.0fの整数値)
        pVtx[i * 2].color = m_Color;
        pVtx[i * 2 + 1].color = m_Color;

        //テクスチャ座標の設定
        pVtx[i * 2].tex = D3DXVECTOR2(m_Tex.x, m_Tex.y);
        pVtx[i * 2 + 1].tex = D3DXVECTOR2(m_Tex.x + m_TexSize.x, m_Tex.y);
    }

    //頂点バッファのロックを解除
    m_pVtxBuffer->Unlock();
}

//*************************************************************************************************
// 描画処理
//*************************************************************************************************
void CMeshEffect::Draw(void)
{
    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice();

    //Direct3DデバイスのNULLチェック
    if (pDevice != NULL)
    {
        // 頂点バッファをデータストリームに設定
        pDevice->SetStreamSource(0, m_pVtxBuffer, 0, sizeof(VERTEX_3D));

        // 頂点フォーマットの設定
        pDevice->SetFVF(FVF_VERTEX_3D);

        //デバイスにインデックスバッファの設定
        pDevice->SetIndices(m_pIdxBuffer);

        //テクスチャの設定
        pDevice->SetTexture(0, m_pTexture);

        //プリミティブの描画
        pDevice->DrawIndexedPrimitive(D3DPT_TRIANGLESTRIP,    //プリッミティブの種類
            0,                                                //オフセット(インデックス)
            0,                                                //最小の頂点インデックス
            MESHEFFECT_POS_NUM,                               //頂点数
            0,                                                //スタートインデックス
            MESHEFFECT_POS_NUM);                              //プリミティブ数
    }
}

//***************************************************************************
// 自身を生成
//***************************************************************************
CMeshEffect *CMeshEffect::Create(void)
{
    CMeshEffect *pMeshEffect;                         //メッシュエフェクトクラスのポインタ

    //動的確保
    pMeshEffect = new CMeshEffect(SCENE_TYPE_MESHEFFECT);

    //初期化処理
    pMeshEffect->Init();

    return pMeshEffect;
}