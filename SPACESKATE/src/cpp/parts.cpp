//*************************************************************************************************
// パーツ処理 (parts.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include "main.h"
#include "renderer.h"
#include "parts.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// コンストラクタ
//*************************************************************************************************
CParts::CParts()
{
    m_Mesh = NULL;
    m_BuffMat = NULL;
    for (int i = 0; i < PARTS_TEXTURE_NUM; i++) m_Texture[i] = NULL;
    m_NumMat = (DWORD)0;
    m_Position = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    m_Rotation = D3DXVECTOR3(0.0f, 0.0f, 0.0f);
    D3DXMatrixIdentity(&m_Matrix);
    m_Parent = NULL;
}

//*************************************************************************************************
// デコンストラクタ
//*************************************************************************************************
CParts::~CParts()
{
}

//*************************************************************************************************
// 初期化処理
//*************************************************************************************************
HRESULT CParts::Init(void)
{
    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice();

    //モデルの読み込み
    if (FAILED(D3DXLoadMeshFromX(
        &m_FileName[0],
        D3DXMESH_MANAGED, 
        pDevice, 
        NULL, 
        &m_BuffMat, 
        NULL, 
        &m_NumMat, 
        &m_Mesh)))
    {
        MessageBox(NULL, "パーツモデルの読み込みに失敗しました", "終了メッセージ", MB_OK);
        return E_FAIL;
    }

    //マテリアル情報バッファのポインタ取得
    D3DXMATERIAL* pMat = (D3DXMATERIAL*)m_BuffMat->GetBufferPointer();

    //各マテリアル情報を保存
    for (int j = 0; j < (int)m_NumMat; j++)
    {
        if (pMat[j].pTextureFilename == NULL) continue;

        //テクスチャの読み込み
        if (FAILED(D3DXCreateTextureFromFile(pDevice, pMat[j].pTextureFilename, &m_Texture[j])))
        {
            MessageBox(NULL, "パーツテクスチャの読み込みに失敗しました", "終了メッセージ", MB_OK);
            return E_FAIL;
        }
    }

    return S_OK;
}

//*************************************************************************************************
// 終了処理
//*************************************************************************************************
void CParts::Uninit(void)
{

}

//*************************************************************************************************
// 自身を生成
//*************************************************************************************************
CParts *CParts::Create(std::string fileName, D3DXVECTOR3 pos, D3DXVECTOR3 rot, CParts *parent)
{
    CParts *pParts;
    pParts = new CParts();
    pParts->m_FileName = fileName;
    pParts->m_Position = pos;
    pParts->m_Rotation = rot;
    pParts->m_Parent = parent;
    pParts->Init();

    return pParts;
}

//*************************************************************************************************
// マトリクスの設定
//*************************************************************************************************
void CParts::SetMatrix(D3DXMATRIX matrix)
{
    m_Matrix = matrix;
}

//*************************************************************************************************
// マトリクスの取得
//*************************************************************************************************
D3DXMATRIX CParts::GetMatrix(void)
{
    return m_Matrix;
}

//*************************************************************************************************
// 座標の取得
//*************************************************************************************************
D3DXVECTOR3 CParts::GetPos(void)
{
    return m_Position;
}

//*************************************************************************************************
// 回転の取得
//*************************************************************************************************
D3DXVECTOR3 CParts::GetRot(void)
{
    return m_Rotation;
}

//*************************************************************************************************
// パーツの取得
//*************************************************************************************************
CParts *CParts::GetParent(void)
{
    return m_Parent;
}

//*************************************************************************************************
// メッシュ情報の取得
//*************************************************************************************************
LPD3DXMESH CParts::GetMesh(void)
{
    return m_Mesh;
}

//*************************************************************************************************
// マテリアル情報の取得
//*************************************************************************************************
LPD3DXBUFFER CParts::GetBuffMat(void)
{
    return m_BuffMat;
}

//*************************************************************************************************
// マテリアル情報の数の取得
//*************************************************************************************************
DWORD CParts::GetNumMat(void)
{
    return m_NumMat;
}

//*************************************************************************************************
// テクスチャポインタの取得
//*************************************************************************************************
LPDIRECT3DTEXTURE9 CParts::GetTexture(int num)
{
    return m_Texture[num];
}

//*************************************************************************************************
// 座標の設定
//*************************************************************************************************
void CParts::SetPos(D3DXVECTOR3 pos)
{
    m_Position = pos;
}

//*************************************************************************************************
// 回転の設定
//*************************************************************************************************
void CParts::SetRot(D3DXVECTOR3 rot)
{
    m_Rotation = rot;
}