//*************************************************************************************************
// プレイヤー2処理 (player2.h)
// Author : YUHEI KAN
//*************************************************************************************************
#ifndef _PLAYER2_H_
#define _PLAYER2_H_

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include "player.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************
//プレイヤー2クラス
class CPlayer2 :public CSceneModel
{
public:
    //状態の種類
    typedef enum
    {
        WAIT = 0,                                   //待機
        WALK,                                       //歩く
        RUN,                                        //走る
        PUNTCH,                                     //パンチ
        STATE_MAX
    }STATE;

    CPlayer2(int nPriority = 3);                    //コンストラクタ
    ~CPlayer2();                                    //デコンストラクタ

    HRESULT Init(void);                             //初期化処理
    void Uninit(void);                              //終了処理
    void Update(void);                              //更新処理
    void Draw(void);                                //描画処理

    static CPlayer2 *Create(D3DXVECTOR3 Pos,
                            D3DXVECTOR3 Scl,
                            int nPriority = 3);     //自身を生成

    CMotion *GetMotion(int i);                      //モーションの取得
    bool GetHalfGoal(void);                         //半分までゴールフラグ取得
    int GetPassingCheckPoint(void);                 //通過したチェックポイントの取得

    void SetPassingCheckPoint(int Num);             //通過したチェックポイントの設定
    void SetHalfGoal(bool HalfGoal);                //半分までゴールフラグの設定
    void SetGoal(bool Goal);                        //ゴールフラグの設定

private:
    void PlayerStateUpdate(void);                   //プレイヤー状態更新
    void PlayerMotion(void);                        //プレイヤーモーション処理
    void PlayerToTrackColision(void);               //プレイヤーとトラックの衝突処理
    void PlayerToItemColision(void);                //プレイヤーとアイテムの衝突処理

    std::vector<CParts*> m_Part;                    //パーツ情報
    CMotion *m_Motion[STATE_MAX];                   //モーション情報
    CMotion m_BlendMotion;                          //モーション情報（ブレンド用）
    float m_MotionBlendFrame;                       //モーションブレンドフレーム
    static int m_ID;                                //プレイヤー2ID
    D3DXVECTOR3 m_Move;                             //移動量
    D3DXVECTOR3 m_OldPos;                           //前回の座標
    STATE m_State;                                  //状態
    STATE m_OldState;                               //前回の状態
    bool m_HalfGoal;                                //半分までゴールフラグ
    bool m_Goal;                                    //ゴールフラグ
    int m_PassingCheckPoint;                        //通過したチェックポイント
};

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

#endif //_PLAYER2_H_