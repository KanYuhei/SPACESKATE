//*************************************************************************************************
// モードタイトル処理 (modeTitle.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include"manager.h"
#include "keyboard.h"
#include "joystick.h"
#include "sound.h"
#include "light.h"
#include "camera.h"
#include "mode.h"
#include "modeTitle.h"
#include "modeGame.h"
#include "scene.h"
#include "scene2D.h"
#include "pressenter.h"
#include "scene3D.h"
#include "meshBox.h"
#include "sceneModel.h"
#include "track.h"
#include "socket.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************
CCamera *CModeTitle::m_Camera = NULL;            //カメラクラスのポインタ
CLight *CModeTitle::m_CLight = NULL;             //ライトクラスのポインタ
bool CModeTitle::m_Game;

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// モードタイトルのコンストラクタ
//*************************************************************************************************
CModeTitle::CModeTitle ( )
{
}

//*************************************************************************************************
// モードタイトルのデストラクタ
//*************************************************************************************************
CModeTitle::~CModeTitle ()
{
}

//*************************************************************************************************
// 初期化処理
//*************************************************************************************************
HRESULT CModeTitle::Init( void )
{
    //ライトクラスの生成と初期化
    m_CLight = new CLight;
    if (FAILED(m_CLight->Init()))
    {
        return E_FAIL;
    }

    //カメラクラスの生成と初期化
    m_Camera = new CCamera;
    if (FAILED(m_Camera->Init()))
    {
        return E_FAIL;
    }

    m_Camera->SetPos(D3DXVECTOR3(3000.0f, 8000.0f, 0.0f));

    //メッシュボックスクラスの生成と初期化
    CMeshBox::Create(D3DXVECTOR3(0.0f, 0.0f, 0.0f),
        D3DXVECTOR3(50000.0f, 50000.0f, 0.0f),
        D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f));

    //トラッククラスの生成と初期化
    CTrack::Create(D3DXVECTOR3(0.0f, 0.0f, 0.0f),
        D3DXVECTOR3(1.0f, 1.0f, 1.0f));

    //シーン2Dクラスの生成
    CScene2D::Create ( "data/TEXTURE/TITLE/spaceskate.png",
                       D3DXVECTOR3 ((SCREEN_WIDTH - (SCREEN_WIDTH * 9.0f * 0.065f)) / 2.0f, (SCREEN_HEIGHT - (SCREEN_HEIGHT * 16.0f * 0.0149f)) / 4.0f, 0.0f ),
                       D3DXVECTOR3 (SCREEN_WIDTH * 9 * 0.065f, SCREEN_HEIGHT * 16 * 0.0149f, 0.0f ),
                       D3DXCOLOR ( 1.0f, 1.0f, 1.0f, 1.0f ),
                       D3DXVECTOR2 ( 0.0f, 0.0f ),
                       D3DXVECTOR2 ( 1.0f, 1.0f ),
                       4 );

    //プレスエンタークラスの生成と初期化
    m_Pressenter = CPressenter::Create(D3DXVECTOR3(0.0f, 0.0f, 0.0f), 4);

    //タイトルBGMを再生する
    CManager::GetSound()->Play(CSound::SOUND_LABEL_BGM_TITLE);

    //プレイヤーゴールタイムの初期化
    CManager::SetPlayerTime(1, 0);
    CManager::SetPlayerTime(2, 0);

    m_SendGameEvent = false;
    m_Game = false;

    return S_OK;
}

//*************************************************************************************************
// 終了処理
//*************************************************************************************************
void CModeTitle::Uninit( void )
{
    //シーンクラスの全ての終了処理
    CScene::ReleaseAll ( );

    //カメラクラスの終了処理
    if (m_Camera != NULL)
    {
        m_Camera->Uninit();
        delete m_Camera;
        m_Camera = NULL;
    }

    //ライトクラスの終了処理
    if (m_CLight != NULL)
    {
        m_CLight->Uninit();
        delete m_CLight;
        m_CLight = NULL;
    }
}

//*************************************************************************************************
// 更新処理
//*************************************************************************************************
void CModeTitle::Update( void )
{
    //ライトクラスの更新
    m_CLight->Update();

    //カメラクラスの更新
    m_Camera->Update();

    //Y軸回転角度の加算
    m_Camera->AddAngleY(D3DX_PI * 0.001f);

    //モードの設定
    if ( CManager::GetInputKeyboard ( )->GetKeyTrigger ( DIK_SPACE ) /*|| 
         CManager::GetInputJoystick ( )->GetJoyTrigger ( CInputJoystick::DIJ_BUTTON, DIJ_CIRCLE)*/ )
    {
        //再生
        CManager::GetSound()->Play(CSound::SOUND_LABEL_SE_ENTER);

        m_SendGameEvent = true;

        //1人で実験するとき
        m_Game = true;
        CManager::GetSound()->Stop(CSound::SOUND_LABEL_BGM_TITLE);
    }

    if (m_SendGameEvent == true)
    {
        //データ送信///////
        DATA data;
        data.Type = DATA_TYPE_EVENT;
        data.Event.Type = DATA_EVENT_TYPE_START;
        CSocket::SendData(data);
    }

    //ゲームモードへ
    if (m_SendGameEvent == true && m_Game == true) CManager::SetMode(new CModeGame);
}

//*************************************************************************************************
// 描画処理
//*************************************************************************************************
void CModeTitle::Draw( void )
{
    //カメラをセットする
    m_Camera->Set();
}

//*************************************************************************************************
// ゲーム進行フラグの設定
//*************************************************************************************************
void CModeTitle::SetGame(void)
{
    m_Game = true;
}