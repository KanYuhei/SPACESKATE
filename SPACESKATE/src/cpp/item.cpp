//*************************************************************************************************
// アイテム処理 (item.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include "manager.h"
#include "keyboard.h"
#include "camera.h"
#include "mode.h"
#include "modeGame.h"
#include "scene.h"
#include "scene3D.h"
#include "sceneModel.h"
#include "track.h"
#include "item.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************
#define MODELNAME        "data/MODEL/kurisutaru.x"           //読み込むモデルの名前

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// アイテムのコンストラクタ
//*************************************************************************************************
CItem::CItem ( int nPriority ):CSceneModel( SCENE_TYPE_ITEM, nPriority )
{
}

//*************************************************************************************************
// アイテムのデストラクタ
//*************************************************************************************************
CItem::~CItem ()
{
}

//*************************************************************************************************
// 初期化処理
//*************************************************************************************************
HRESULT CItem::Init(void)
{
    //Xファイルの読み込み
    CSceneModel::LoadX(MODELNAME);

    //シーンモデルクラスの初期化処理
    CSceneModel::Init ( );

    return S_OK;
}

//*************************************************************************************************
// 終了処理
//*************************************************************************************************
void CItem::Uninit(void)
{
    //シーンモデルクラスの終了処理
    CSceneModel::Uninit ( );
}

//*************************************************************************************************
// 更新処理
//*************************************************************************************************
void CItem::Update(void)
{
    //シーンモデルクラスの更新処理
    CSceneModel::Update ( );

    m_Pos.y -= 1.0f;
    
    m_Rot.y += 0.1f;

    //メッシュフィールドクラスの取得
    CTrack *pTrack = CModeGame::GetTrack();

    //地面の高さを取得
    float Pos_y = pTrack->GetHeight(m_Pos);

    //地面に衝突した場合
    if ( Pos_y-20.0f <= m_Pos.y )
    {
        m_Pos.y = pTrack->GetHeight(m_Pos) + 20.0f;
    }
}

//*************************************************************************************************
// 描画処理
//*************************************************************************************************
void CItem::Draw(void)
{
    D3DXVECTOR3 cameraPos = CModeGame::GetCamera()->GetPos();
    D3DXVECTOR3 itemPos = m_Pos;
    cameraPos.y = 0.0f;
    itemPos.y = 0.0f;
    D3DXVECTOR3 cameraToitem = itemPos - cameraPos;
    D3DXVec3Normalize(&cameraToitem, &cameraToitem);

    //物体が視野に入っているかチェック
    if (CModeGame::GetCamera()->IntoView(cameraToitem, D3DX_PI * 0.5f))
    {
        //シーンモデルクラスの描画処理
        CSceneModel::Draw();
    }
}

//*************************************************************************************************
// 自身を生成
//*************************************************************************************************
CItem *CItem::Create ( D3DXVECTOR3 Pos, D3DXVECTOR3 Scl, int nPriority )
{
    CItem *pScenePlayer;                         //シーン２Dクラスのポインタ

    //動的確保
    pScenePlayer = new CItem( nPriority );

    //各種初期化
    pScenePlayer->m_Pos = Pos;
    pScenePlayer->m_Scl = Scl;

    //初期化処理
    pScenePlayer->Init ( );

    return pScenePlayer;
}

//*************************************************************************************************
// 回転の取得
//*************************************************************************************************
D3DXVECTOR3 CItem::GetPos ( void )
{
    return m_Pos;
}