//*************************************************************************************************
// コリジョン処理 (colision.h)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードガード
//*************************************************************************************************
#ifndef _COLISION_H_
#define _COLISION_H_
//
////*************************************************************************************************
//// インクルード
////*************************************************************************************************
//
////*************************************************************************************************
//// 定数定義
////*************************************************************************************************
//
////*************************************************************************************************
//// 列挙体
////*************************************************************************************************
//
////*************************************************************************************************
//// 構造体
////*************************************************************************************************
//
////*************************************************************************************************
//// 前方宣言
////*************************************************************************************************
//class CLine3D;
//class COBB;
//
////*************************************************************************************************
//// クラス
////*************************************************************************************************
////コリジョンクラス
//class CColision
//{
//public:
//    CColision();                                                //コンストラクタ
//    ~CColision();                                               //デコンストラクタ
//
//    bool HitLine3DtoPoint(CLine3D &line3D, D3DXVECTOR3 &point); //線分と点の衝突判定
//    bool HitOBBs(COBB &obb1, COBB &obb2);                       //OBB同士の衝突判定
//
//private:
//    float LenSegOnSeparateAxis(
//        D3DXVECTOR3 *Sep, 
//        D3DXVECTOR3 *e1, D3DXVECTOR3 *e2, D3DXVECTOR3 *e3 = 0); //分離軸に投影された軸成分から投影線分長を算出
//};
//
////*************************************************************************************************
//// プロトタイプ宣言
////*************************************************************************************************
//
#endif //_COLISION_H_