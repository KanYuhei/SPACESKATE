//*************************************************************************************************
// シーン処理 (scene.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルードファイル
//*************************************************************************************************
#include "scene.h"

//*************************************************************************************************
// マクロ定義 
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// クラス
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************
CScene *CScene::m_Top[] = {};                   //シーンクラスのトップ

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// シーンのコンストラクタ
//*************************************************************************************************
CScene::CScene ( SCENE_TYPE type, int nPriolity )
{
    //シーンクラスのトップが生成されているか
    if ( m_Top[nPriolity] == NULL )
    {
        m_Top[nPriolity] = this;
    }
    else
    {
         CScene *pCScene;                       //現在のポインター

         //トップのポインターを代入
         pCScene = m_Top[nPriolity];

        //生成されてるシーンの数分繰り返す
        while ( pCScene->m_Next != NULL )
        {
            //現在のポインターに次のポインターを代入
            pCScene = pCScene->m_Next;
        }

        //自身のポインタを代入
        pCScene->m_Next = this;
    }

    //次のポインターにNULLを代入
    this->m_Next = NULL;

    //各種初期化
    m_Pos = D3DXVECTOR3 ( 0.0f, 0.0f, 0.0f );
    m_Size = D3DXVECTOR3 ( 0.0f, 0.0f, 0.0f );
    m_Tex = D3DXVECTOR2 ( 0.0f, 0.0f );
    m_TexSize = D3DXVECTOR2 ( 0.0f, 0.0f );
    m_Color = D3DXCOLOR ( 0.0f, 0.0f, 0.0f, 0.0f );
    m_Type = type;
    m_Delete = false;
}

//*************************************************************************************************
// シーンのデストラクタ
//*************************************************************************************************
CScene::~CScene ()
{
}

//*************************************************************************************************
// 全ての更新処理
//*************************************************************************************************
void CScene::UpdataAll ( void )
{
    CScene *pCScene;                            //現在のポインター
    CScene *pCSceneNext;                        //次のポインター
    CScene *pCScenePrev;                        //前のポインター
    int nUpdatePriolity = 0;                    //更新順番

    //優先度数分繰り返す
    while ( nUpdatePriolity < PRIORITY_NUM )
    {
        //トップのポインターを代入
        pCScene = m_Top[nUpdatePriolity];

        //生成されてるシーンの数分繰り返す
        while ( pCScene != NULL )
        {
            //各シーンクラスの更新
            pCScene->Update ( );

            //現在のポインターに次のポインターを代入
            pCScene = pCScene->m_Next;
        }

        //トップのポインターを代入
        pCScene = m_Top[nUpdatePriolity];
        pCScenePrev = m_Top[nUpdatePriolity];

        //生成されてるシーンの数分繰り返す
        while ( pCScene != NULL )
        {
            //次のポインターを代入
            pCSceneNext = pCScene->m_Next;

            //現在のポインターが削除フラグ真の場合
            if ( pCScene->m_Delete == true )
            {
                //現在のポインターがトップの場合
                if ( pCScene == m_Top[nUpdatePriolity] )
                {
                    //トップに次のポインターを代入
                    m_Top[nUpdatePriolity] = pCScene->m_Next;
                }
                else
                {
                    //前のポインターの次に現在のポインターの次を代入
                    pCScenePrev->m_Next = pCScene->m_Next;
                }

                //各シーンクラスの終了
                pCScene->Uninit ( );
                delete pCScene;
            }
            else
            {
                //前のポインターに現在のポインターを代入
                pCScenePrev = pCScene;
            }

            //現在のポインターに次のポインターを代入
            pCScene = pCSceneNext;
        }

        nUpdatePriolity++;
    }
}

//*************************************************************************************************
// 全ての描画処理
//*************************************************************************************************
void CScene::DrawAll ( void )
{
    CScene *pCScene;                            //現在のポインター
    int nDrawPriority = 0;                      //描画順番

    //優先度数分繰り返す
    while ( nDrawPriority < PRIORITY_NUM )
    {
        //トップのポインターを代入
        pCScene = m_Top[nDrawPriority];

        //生成されてるシーンの数分繰り返す
        while ( pCScene != NULL )
        {
            //各シーンクラスの描画
            pCScene->Draw ( );

            //現在のポインターに次のポインターを代入
            pCScene = pCScene->m_Next;
        }

        nDrawPriority++;
    }
}

//*************************************************************************************************
// 指定した優先度を全て描画
//*************************************************************************************************
void CScene::DrawPriolityAll(int nPriolity)
{
    CScene *pCScene;                            //現在のポインター

    //トップのポインターを代入
    pCScene = m_Top[nPriolity];

    //生成されてるシーンの数分繰り返す
    while (pCScene != NULL)
    {
        //各シーンクラスの描画
        pCScene->Draw();

        //現在のポインターに次のポインターを代入
        pCScene = pCScene->m_Next;
    }
}

//*************************************************************************************************
// 全ての終了処理
//*************************************************************************************************
void CScene::ReleaseAll ( void )
{
    CScene *pCScene;                            //現在のポインター
    CScene *pCSceneNext;                        //次のポインター
    int nReleasePriority = 0;                   //終了順番

    //優先度数分繰り返す
    while ( nReleasePriority < PRIORITY_NUM )
    {
        //トップのポインターを代入
        pCScene = m_Top[nReleasePriority];

        //生成されてるシーンの数分繰り返す
        while ( pCScene != NULL )
        {
            //消される次のポインターを代入
            pCSceneNext = pCScene->m_Next;

            //各シーンクラスの終了
            pCScene->Uninit ( );
            delete pCScene;

            //現在のポインターに次のポインターを代入
            pCScene = pCSceneNext;
        }

        //トップのポインターにNULLを代入
        m_Top[nReleasePriority] = NULL;

        nReleasePriority++;
    }
}

//*************************************************************************************************
// 自身を終了
//*************************************************************************************************
void CScene::Release ( void )
{
    m_Delete = true;
}

//*************************************************************************************************
// シーンクラスの次のポインター
//*************************************************************************************************
CScene *CScene::GetNext ( void )
{
    return m_Next;
}

//*************************************************************************************************
// リストの取得
//*************************************************************************************************
CScene *CScene::GetList ( int nPriolity )
{
    return m_Top[nPriolity];
}

//*************************************************************************************************
// 座標の取得
//*************************************************************************************************
D3DXVECTOR3 CScene::GetPos ( void )
{
    return m_Pos;
}

//*************************************************************************************************
// サイズの取得
//*************************************************************************************************
D3DXVECTOR3 CScene::GetSize ( void )
{
    return m_Size;
}

//*************************************************************************************************
// テクスチャ座標の取得
//*************************************************************************************************
D3DXVECTOR2 CScene::GetTex ( void )
{
    return m_Tex;
}

//*************************************************************************************************
// テクスチャサイズの取得
//*************************************************************************************************
D3DXVECTOR2 CScene::GetTexSize ( void )
{
    return m_TexSize;
}

//*************************************************************************************************
// 色の取得
//*************************************************************************************************
D3DXCOLOR CScene::GetColor ( void )
{
    return m_Color;
}


//*************************************************************************************************
// 座標の設定
//*************************************************************************************************
void CScene::SetPos ( D3DXVECTOR3 Pos )
{
    m_Pos = Pos;
}

//*************************************************************************************************
// サイズの設定
//*************************************************************************************************
void CScene::SetSize ( D3DXVECTOR3 Size )
{
    m_Size = Size;
}

//*************************************************************************************************
// テクスチャ座標の設定
//*************************************************************************************************
void CScene::SetTex ( D3DXVECTOR2 Tex )
{
    m_Tex = Tex;
}

//*************************************************************************************************
// テクスチャサイズの設定
//*************************************************************************************************
void CScene::SetTexSize ( D3DXVECTOR2 TexSize )
{
    m_TexSize = TexSize;
}

//*************************************************************************************************
// 色の設定
//*************************************************************************************************
void CScene::SetColor ( D3DXCOLOR Color )
{
    m_Color = Color;
}

//*************************************************************************************************
// シーンタイプの取得
//*************************************************************************************************
SCENE_TYPE CScene::GetType ( void )
{
    return m_Type;
}
