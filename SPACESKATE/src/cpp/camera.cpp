//*************************************************************************************************
// カメラ処理 (camera.cpp)
// Author : YUHEI KAN
//*************************************************************************************************

//*************************************************************************************************
// インクルード
//*************************************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "camera.h"
#include "keyboard.h"
#include "mouse.h"
#include "mode.h"
#include "modeGame.h"
#include "scene.h"
#include "sceneModel.h"
#include "player.h"

//*************************************************************************************************
// 定数定義
//*************************************************************************************************
#define CAMERA_NEAR        ( 1.0f )             //近いビュー平面のZ値(0.0f < NEAR)
#define CAMERA_FAR         ( 80000.0f )         //遠いビュー平面のZ値(NEAR < FAR)

//*************************************************************************************************
// 列挙体
//*************************************************************************************************

//*************************************************************************************************
// 構造体
//*************************************************************************************************

//*************************************************************************************************
// プロトタイプ宣言
//*************************************************************************************************

//*************************************************************************************************
// グローバル変数
//*************************************************************************************************

//*************************************************************************************************
// カメラのコンストラクタ
//*************************************************************************************************
CCamera::CCamera ()
{
    //各種初期化処理
    m_posAt = D3DXVECTOR3 ( 0.0f, 0.0f, 0.0f );     //注視点
    m_posEye = D3DXVECTOR3 ( 0.0, 0.0, 0.0f );      //カメラ座標
    m_vecUp = D3DXVECTOR3 ( 0.0f, 0.0f, 0.0f );     //上方向ベクトル
    m_vecDirect = D3DXVECTOR3(0.0f, 0.0f, 0.0f);    //前方向ベクトル

    //注視点からの距離
    m_fLength = 0.0f;

    //XY軸回転角度
    m_fAngleY = 0.0f;
    m_fAngleX = 0.0f;

    //画面サイズ
    m_nScreenWidth = 0;
    m_nScreenHeight = 0;
}

//*************************************************************************************************
// カメラのデストラクタ
//*************************************************************************************************
CCamera::~CCamera ()
{
}

//*************************************************************************************************
// カメラ初期化処理
//*************************************************************************************************
HRESULT CCamera::Init ( void )
{
    //各種初期化処理
    m_posAt = D3DXVECTOR3 ( 0.0f, 0.0f, 0.0f );    //注視点
    m_posEye = D3DXVECTOR3 ( 0.0, 350.0, -80.0f );   //カメラ座標
    m_vecUp = D3DXVECTOR3 ( 0.0f, 1.0f, 0.0f );     //上方向ベクトル
    m_vecDirect = m_posAt - m_posEye;               //前方向ベクトル

    //注視点からの距離
    m_fLength = 150.0f;

    //XY軸回転角度
    m_fAngleY = D3DX_PI * -0.5f;
    m_fAngleX = D3DX_PI * -0.005f;

    //画面サイズ
    m_nScreenWidth = SCREEN_WIDTH;
    m_nScreenHeight = SCREEN_HEIGHT;

    return S_OK;
}

//*************************************************************************************************
// カメラ終了処理
//*************************************************************************************************
void CCamera::Uninit ( void )
{
}

//*************************************************************************************************
// カメラ更新処理
//*************************************************************************************************
void CCamera::Update ( void )
{
    //マウス入力クラス
    CInputMouse *InputMouse = CManager::GetInputMouse ( );

    //プレイヤーの進行方向取得
    // D3DXVECTOR3 Rot = CModeGame::GetPlayer()->GetRot();
    
    //カメラ回転
    if (InputMouse->GetLeftPress())           //左クリックしている時
    {
        //マウスX軸取得
        m_fAngleY += D3DX_PI * ((float)InputMouse->GetAxisX() / m_nScreenWidth);
        //マウスY軸取得
        m_fAngleX += D3DX_PI * ((float)InputMouse->GetAxisY() / m_nScreenHeight);
    }

    m_fLength += -(float)InputMouse->GetAxisZ() * 0.1f;

    D3DXVECTOR3 Pos = D3DXVECTOR3 ( 0.0f, 0.0f, -m_fLength );
    D3DXVECTOR3 PosUp = D3DXVECTOR3 ( 0.0f, 1.0f, 0.0f );

    D3DXMATRIX mtxRotY;
    D3DXMatrixRotationY ( &mtxRotY, m_fAngleY );
    D3DXMATRIX mtxRotX;
    D3DXMatrixRotationX ( &mtxRotX, m_fAngleX );

    D3DXMATRIX mtxRot = mtxRotX * mtxRotY;

    D3DXVec3TransformCoord ( &Pos, &Pos, &mtxRot );
    Pos += m_posAt;
    m_posEye = Pos;
    D3DXVec3TransformCoord ( &m_vecUp, &PosUp, &mtxRot );

    CInputKeyboard *m_pInputKeyboard;           //キーボード入力クラスポインタ

    //キーボード入力クラスの取得
    m_pInputKeyboard = CManager::GetInputKeyboard ( );

    m_vecDirect = m_posAt - m_posEye;               //前方向ベクトル
}

//*************************************************************************************************
// カメラをセットする
//*************************************************************************************************
void CCamera::Set ( void )
{
    //Direct3Dデバイスの取得
    LPDIRECT3DDEVICE9 pDevice = CRenderer::GetDevice ( );

    //Direct3DデバイスのNULLチェック
    if ( pDevice != NULL )
    {
        //変数宣言
        D3DXMATRIX mtxProj;                     //プロジェクション行列
        float fFovY = D3DX_PI / 3.0f;           //画角(視野角)

        //アスペクト比
        float aspect = (float)m_nScreenWidth/m_nScreenHeight;

        //////////////////////////////
        // プロジェクション座標変換
        //////////////////////////////
        //プロジェクション行列を作る関数
        D3DXMatrixPerspectiveFovLH ( &mtxProj, 
                        fFovY,                                  //画角（視野角）
                        aspect,                                 //アスペクト比
                        CAMERA_NEAR,                            //near
                        CAMERA_FAR );                           //far

        //デバイスにプロジェクション変換行列を設定
        pDevice->SetTransform ( D3DTS_PROJECTION, &mtxProj );

        //////////////////////////////
        // ビュー座標変換
        //////////////////////////////
        //ビュー行列を作る関数
        D3DXMatrixLookAtLH ( &m_mtxView, &m_posEye, &m_posAt, &m_vecUp );

        //デバイスにビュー変換行列を設定
        pDevice->SetTransform ( D3DTS_VIEW, &m_mtxView);
    }
    else
    {
        MessageBox ( NULL, "カメラでDirect3Dデバイスの取得に失敗しました", "終了メッセージ", MB_OK );
    }
}

//*************************************************************************************************
// 座標の取得
//*************************************************************************************************
D3DXVECTOR3 CCamera::GetPos ( void )
{
    return m_posEye;
}

//*************************************************************************************************
// 注視点の取得
//*************************************************************************************************
D3DXVECTOR3 CCamera::GetPosAt ( void )
{
    return m_posAt;
}

//*************************************************************************************************
// 前方向ベクトルの取得
//*************************************************************************************************
D3DXVECTOR3 CCamera::GetVecDirect(void)
{
    return m_vecDirect;
}


//*************************************************************************************************
// 座標の設定
//*************************************************************************************************
void CCamera::SetPos ( D3DXVECTOR3 Pos )
{
    m_posEye = Pos;
}

//*************************************************************************************************
// 注視点の設定
//*************************************************************************************************
void CCamera::SetPosAt ( D3DXVECTOR3 Pos )
{
    m_posAt = Pos;
}

//*************************************************************************************************
// 画面の幅取得
//*************************************************************************************************
int CCamera::GetScreenWidth ( void )
{
    return m_nScreenWidth;
}

//*************************************************************************************************
// 画面の高さ取得
//*************************************************************************************************
int CCamera::GetScreenHeight ( void )
{
    return m_nScreenHeight;
}

//*************************************************************************************************
// 画面サイズの設定
//*************************************************************************************************
void CCamera::SetScreenSize ( int width, int height )
{
    m_nScreenWidth = width;
    m_nScreenHeight = height;
}

//*************************************************************************************************
// ビュー行列の取得
//*************************************************************************************************
D3DXMATRIX *CCamera::GetmtxView(void)
{
    return &m_mtxView;
}

//*************************************************************************************************
// 注視点からの距離の加算
//*************************************************************************************************
void CCamera::AddLength(float length)
{
    m_fLength += length;
}

//*************************************************************************************************
// Y軸回転角度の加算
//*************************************************************************************************
void CCamera::AddAngleY(float AngleY)
{
    m_fAngleY += AngleY;
}

//*************************************************************************************************
// X軸回転角度の加算
//*************************************************************************************************
void CCamera::AddAngleX(float AngleX)
{
    m_fAngleX += AngleX;
}

//*************************************************************************************************
// 物体が視野に入っているかチェック
//*************************************************************************************************
bool CCamera::IntoView(D3DXVECTOR3 Vec, float rad)
{
    float angle = 0.0f;
    D3DXVECTOR3 VecDirectFront = m_vecDirect;
    VecDirectFront.y = 0.0f;
    D3DXVec3Normalize(&VecDirectFront, &VecDirectFront);
    angle = D3DXVec3Dot(&VecDirectFront, &Vec);
    angle = acosf(angle);

    if ( -rad <= angle && angle <= rad)
    {
        return true;
    }
    return false;
}